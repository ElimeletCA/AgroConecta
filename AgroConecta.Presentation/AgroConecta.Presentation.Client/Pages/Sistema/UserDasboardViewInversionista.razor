@page "/dashboard-inversionista"
@using System.Net.Http.Headers
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Helpers.Seguridad
@using AgroConecta.Shared.Constantes.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudGrid Spacing="3">
        
        <!-- Tarjetas de Resumen -->
        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Inversiones Activas</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary">@InversionesActivas</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Inversiones Finalizadas</MudText>
                <MudText Typo="Typo.h4" Color="Color.Secondary">@InversionesFinalizadas</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Capital Invertido</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Tertiary">@($"${CapitalInvertido:N2}")</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Retorno Estimado</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Success">@($"${RetornoEstimado:N2}")</MudText>
            </MudPaper>
        </MudItem>

        <!-- Tabla de Inversiones Realizadas -->
        <MudItem xs="12">
            <MudTable Items="@Inversiones" Dense="true">
                <HeaderContent>
                    <MudTh>Proyecto</MudTh>
                    <MudTh>Monto Invertido</MudTh>
                    <MudTh>Estado</MudTh>
                    <MudTh>Retorno Estimado</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>

                <RowTemplate Context="inversion">
                    <MudTd>@inversion.Proyecto</MudTd>
                    <MudTd>@($"${inversion.Monto:N2}")</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@GetEstadoColor(inversion.Estado)">
                            @inversion.Estado
                        </MudChip>
                    </MudTd>
                    <MudTd>@($"${inversion.Retorno:N2}")</MudTd>
                    <MudTd>
                        <MudIconButton Icon="icons.mdi-eye" Color="Color.Primary" OnClick="@(() => VerDetallesInversion(inversion.Id))" />
                        <MudIconButton Icon="icons.mdi-chart-line" Color="Color.Secondary" OnClick="@(() => VerReporteFinanciero(inversion.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>

        <!-- Oportunidades de Inversión -->
        <MudItem xs="12">
            <MudTable Items="@Oportunidades" Dense="true">
                <HeaderContent>
                    <MudTh>Proyecto</MudTh>
                    <MudTh>Ubicación</MudTh>
                    <MudTh>Meta de Inversión</MudTh>
                    <MudTh>Inversión Recolectada</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>

                <RowTemplate Context="oportunidad">
                    <MudTd>@oportunidad.Proyecto</MudTd>
                    <MudTd>@oportunidad.Ubicacion</MudTd>
                    <MudTd>@($"${oportunidad.Meta:N2}")</MudTd>
                    <MudTd>@($"${oportunidad.Recolectado:N2}")</MudTd>
                    <MudTd>
                        <MudIconButton Icon="icons.mdi-eye" Color="Color.Primary" OnClick="@(() => VerDetallesOportunidad(oportunidad.Id))" />
                        <MudIconButton Icon="icons.mdi-cash" Color="Color.Success" OnClick="@(() => InvertirEnProyecto(oportunidad.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int InversionesActivas = 4;
    private int InversionesFinalizadas = 2;
    private decimal CapitalInvertido = 35000;
    private decimal RetornoEstimado = 45000;

    private List<dynamic> Inversiones = new()
    {
        new { Id = 1, Proyecto = "Cultivo de Tomates", Monto = 5000, Estado = "Activa", Retorno = 7000 },
        new { Id = 2, Proyecto = "Plantación de Aguacates", Monto = 10000, Estado = "Finalizada", Retorno = 13000 },
        new { Id = 3, Proyecto = "Cosecha de Café", Monto = 2000, Estado = "Pendiente", Retorno = 3000 }
    };

    private List<dynamic> Oportunidades = new()
    {
        new { Id = 1, Proyecto = "Producción de Maíz Orgánico", Ubicacion = "Monte Plata", Meta = 15000, Recolectado = 8000 },
        new { Id = 2, Proyecto = "Siembra de Frutas Tropicales", Ubicacion = "San Cristóbal", Meta = 20000, Recolectado = 12000 }
    };

    private void VerDetallesInversion(int id) => Nav.NavigateTo($"/inversion/{id}");
    private void VerReporteFinanciero(int id) => Nav.NavigateTo($"/inversion/reporte/{id}");
    private void VerDetallesOportunidad(int id) => Nav.NavigateTo($"/oportunidad/{id}");
    private void InvertirEnProyecto(int id) => Console.WriteLine($"Invertir en el proyecto {id}");

    private Color GetEstadoColor(string estado) => estado switch
    {
        "Activa" => Color.Success,
        "Finalizada" => Color.Tertiary,
        "Pendiente" => Color.Warning,
        "Cancelada" => Color.Error,
        _ => Color.Default
    };
    private string Prueba;
    string _value;
    private TokenManager _tokenManager;
    private ClaimsPrincipal _usuario;
    protected override Task OnInitializedAsync()
    {
        _tokenManager = new TokenManager(JS);
        return base.OnInitializedAsync();
    }
    public async Task  PruebaT(){
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",  await _tokenManager.GetTokenAsync());
        //var response2FA = (await Http.GetAsync("api/Auth/GetTerrenos")).Content.ReadFromJsonAsync<ApiResponse>().Result;
        var response2FA = (await Http.GetStringAsync("api/Auth/GetTerrenos"));

        //var response2F = (await Http.GetAsync("api/Auth/GetTerrenos")).Content

        Console.WriteLine(response2FA);
    }
}