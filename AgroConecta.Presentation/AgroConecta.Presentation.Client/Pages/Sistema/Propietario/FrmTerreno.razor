@using System.Globalization
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.General
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.Tipos
@using AgroConecta.Shared.DTO
@using AgroConecta.Presentation.Client.Components.Seguridad

@using AgroConecta.Shared.DTO.Tipos
@using AgroConecta.Shared.Estados
@using MudBlazor.Utilities
@using AgroConecta.Presentation.Client.Components.General
@inject IJSRuntime JS
@inject ITipoMedidaAreaAgent TipoMedidaAreaAgent
@inject ITipoSueloAgent TipoSueloAgent
@inject IProvinciaAgent ProvinciaAgent
@inject IMunicipioAgent MunicipioAgent

@inject ITerrenoAgent TerrenoAgent
@inject ISnackbar Snackbar

<AuthorizeView Context="authContext">
    <Authorizing>
        <PantallaCarga/>
    </Authorizing>
    <NotAuthorized>
        <NoAutenticado/>
    </NotAuthorized>
    <Authorized>
        @{
            _usuario = authContext.User;


        }
        <MudDialog ContentStyle="width: 1000px; !important">
            <TitleContent>
                <MudText Typo="Typo.h6">@Title</MudText>
            </TitleContent>
            <DialogContent>
                <MudForm @ref="_form" Disabled="@IsViewMode">

                    <MudStepper  @bind-ActiveIndex="_index" CenterLabels="true" OnPreviewInteraction="OnPreviewInteraction" ShowResetButton>

                        @*Información básica*@
                        <MudStep Title="Información básica del terreno">
                            <MudContainer Class="py-4 py-sm-8 py-md-8 py-lg-8 py-xl-8">
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="12" sm="8" md="8" lg="8">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="select_tipo_medida_area" Color="Color.Dark">Tipo de medida de área</MudText>
                                                <div style="max-width: 300px;">
                                                    <MudSelect
                                                        @ref="_mudSelectTipoMedidaAreaRef"
                                                        Margin="Margin.Dense"
                                                        Class="flow-select"
                                                        @bind-Value="Terreno.TipoMedidaAreaId"
                                                        InputId="select_tipo_medida_area"
                                                        Label=""
                                                        Variant="Variant.Outlined"
                                                        AnchorOrigin="Origin.BottomCenter"
                                                        TransformOrigin="Origin.TopCenter"
                                                        Required="true"
                                                        ReadOnly="@IsViewMode"
                                                        RequiredError="Se requiere un tipo de media de área"
                                                    >
                                                        @foreach (var tipoMedidaArea in _listaTiposMedidaArea)
                                                        {
                                                            <MudSelectItem Value="tipoMedidaArea.Id">@tipoMedidaArea.Descripcion</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="select_tipo_suelo" Color="Color.Dark">Tipo de suelo</MudText>
                                                <div style="max-width: 300px;">
                                                    <MudSelect
                                                        Margin="Margin.Dense"
                                                        Class="flow-select"
                                                        @bind-Value="Terreno.TipoSueloId"
                                                        InputId="select_tipo_suelo"
                                                        Label=""
                                                        Variant="Variant.Outlined"
                                                        AnchorOrigin="Origin.BottomCenter"
                                                        TransformOrigin="Origin.TopCenter"
                                                        Required="true"
                                                        ReadOnly="@IsViewMode"
                                                        RequiredError="Se requiere un tipo de suelo"
                                                    >
                                                        @foreach (var tipoSuelo in _listaTiposSuelo)
                                                        {
                                                            <MudSelectItem Value="tipoSuelo.Id">@tipoSuelo.Descripcion</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="input_cantidad_total_area" Color="Color.Dark">Cantidad total de área de suelo</MudText>
                                                <MudNumericField
                                                    Margin="Margin.Dense"
                                                    Class="flow-input"
                                                    HideSpinButtons="true"
                                                    Label=""
                                                    Variant="Variant.Outlined"
                                                    InputId="input_cantidad_total_area"
                                                    @bind-Value="@Terreno.CantidadAreaSueloTotal"
                                                    Min="0.0"
                                                    Max="10000000.0"
                                                    ReadOnly="@IsViewMode"
                                                    Validation="@(new Func<double?, IEnumerable<string>>(ValidateNumericFieldDouble))"
                                                />

                                            </MudItem>
                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="input_precio_unidad_area" Color="Color.Dark">Precio por unidad de área</MudText>
                                                <MudNumericField
                                                    Margin="Margin.Dense"
                                                    Class="flow-input"
                                                    HideSpinButtons="true"
                                                    Label=""
                                                    Variant="Variant.Outlined"
                                                    InputId="input_precio_unidad_area"
                                                    @bind-Value="@Terreno.PrecioPorArea"
                                                    Min="0.0M"
                                                    Step=".2M"
                                                    Max="10000000.0M"
                                                    ReadOnly="@IsViewMode"
                                                    Validation="@(new Func<decimal?, IEnumerable<string>>(ValidateNumericFieldDecimal))"
                                                />
                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudContainer>
                        </MudStep>
                        @*Ubicación del terreno*@
                        <MudStep Title="Ubicación del terreno">
                            <MudContainer Class="py-4 py-sm-8 py-md-8 py-lg-8 py-xl-8">
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="12" sm="8" md="8" lg="8">
                                        <MudGrid>
                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="select_provincia" Color="Color.Dark">Provincia</MudText>
                                                <div style="max-width: 300px;">
                                                    <MudSelect T="string" Value="Terreno.ProvinciaId"
                                                               ValueChanged="ObtenerMunicipiosDeProvincia"
                                                               ValueExpression="@(() => Terreno.ProvinciaId)"
                                                               Margin="Margin.Dense"
                                                               Class="flow-select"
                                                               InputId="select_provincia"
                                                               Label=""
                                                               Variant="Variant.Outlined"
                                                               AnchorOrigin="Origin.BottomCenter"
                                                               TransformOrigin="Origin.TopCenter"
                                                               Required="true"
                                                               ReadOnly="@IsViewMode"
                                                               RequiredError="Este campo es requerido"
                                                    >
                                                        @foreach (var provincia in _listaProvincias)
                                                        {
                                                            <MudSelectItem T="string" Value="@provincia.Id">@provincia.Descripcion</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </MudItem>

                                            <MudItem xs="12" sm="6">
                                                <MudText Class="pb-1" HtmlTag="label" for="select_municipio" Color="Color.Dark">Municipio</MudText>
                                                <div style="max-width: 300px;">
                                                    <MudSelect T="string"
                                                               @bind-Value="Terreno.MunicipioId"
                                                               Margin="Margin.Dense"
                                                               Class="flow-select"
                                                               InputId="select_municipio"
                                                               Label=""
                                                               Variant="Variant.Outlined"
                                                               AnchorOrigin="Origin.BottomCenter"
                                                               TransformOrigin="Origin.TopCenter"
                                                               Required="true"
                                                               ReadOnly="@IsViewMode"
                                                               RequiredError="Este campo es requerido"
                                                    >
                                                        @foreach (var municipio in _listaMunicipiosFiltrados)
                                                        {
                                                            <MudSelectItem T="string" Value="@municipio.Id">@municipio.Descripcion</MudSelectItem>
                                                        }
                                                    </MudSelect>
                                                </div>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <div id="mapTerreno" class="map" style="height:250px;width:550px"></div>

                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudContainer>
                        </MudStep>
                        @*Imagenes del terreno*@
                        <MudStep Title="Imágenes">
                            <MudContainer Class="py-4 py-sm-8 py-md-8 py-lg-8 py-xl-8">
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="12" sm="8" md="8" lg="8">
                                        <MudGrid>
                                            <MudItem xs="12">
                                                <MudStack Style="width: 100%">
                                                    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                                                                   Accept=".jpg,.jpeg,.png"
                                                                   @ref="_fileUpload"
                                                                   MaximumFileCount="8"
                                                                   OnFilesChanged="OnInputFileChanged"
                                                                   AppendMultipleFiles
                                                                   Hidden="false"
                                                                   InputClass="absolute mud-width-full mud-height-full overflow-hidden z-10"
                                                                   InputStyle="opacity:0"
                                                                   tabindex="-1"
                                                                   @ondrop="ClearDragClass"
                                                                   @ondragenter="SetDragClass"
                                                                   @ondragleave="ClearDragClass"
                                                                   @ondragend="ClearDragClass">
                                                        <ActivatorContent>
                                                            <MudPaper Height="350px"
                                                                      Outlined="true"
                                                                      Class="@_dragClass">
                                                                <MudText Typo="Typo.h6" Align="Align.Center">
                                                                    Arrastre y suelte los archivos aquí o haga click
                                                                </MudText>
                                                                @* Se muestra el preview de las imágenes en formato cuadrado *@
                                                                <div class="d-flex flex-wrap justify-center mt-4">
                                                                    @foreach (var preview in imagePreviews)
                                                                    {
                                                                        <div class="m-2 mb-4 mr-4" style="width:110px; height:110px; overflow:hidden; border:1px solid #ccc; border-radius:4px">
                                                                            <img src="@preview" style="width:100%; height:100%; object-fit:cover;" />
                                                                        </div>
                                                                    }
                                                                </div>
                                                            </MudPaper>
                                                        </ActivatorContent>
                                                    </MudFileUpload>
                                                    <MudToolBar Gutters="false"
                                                                Class="relative d-flex justify-end gap-4">
                                                        <MudButton Color="Color.Primary"
                                                                   OnClick="OpenFilePickerAsync"
                                                                   Variant="Variant.Filled">
                                                            Abrir archivos
                                                        </MudButton>
                                                        <MudButton Color="Color.Primary"
                                                                   Disabled="@(!imagePreviews.Any())"
                                                                   OnClick="Upload"
                                                                   Variant="Variant.Filled">
                                                            Subir
                                                        </MudButton>
                                                        <MudButton Color="Color.Error"
                                                                   Disabled="@(!imagePreviews.Any())"
                                                                   OnClick="ClearAsync"
                                                                   Variant="Variant.Filled">
                                                            Limpiar
                                                        </MudButton>
                                                    </MudToolBar>
                                                </MudStack>                        
                                                </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudContainer>
                        </MudStep>
                        @*Comentarios y verificación*@
                        <MudStep Title="Descripción y comentarios">
                            <MudContainer Class="py-4 py-sm-8 py-md-8 py-lg-8 py-xl-8">
                                <MudGrid Justify="Justify.Center">
                                    <MudItem xs="12" sm="8" md="8" lg="8">
                                        <MudGrid>
                                            <MudItem xs="12" sm="12">
                                                <MudText Class="pb-1" HtmlTag="label" for="input_descripcion" Color="Color.Dark">Descripción del terreno</MudText>
                                                <MudTextField
                                                    AutoGrow
                                                    Lines="3"
                                                    Margin="Margin.Dense"
                                                    Class="flow-input"
                                                    InputId="input_descripcion"
                                                    @bind-Value="@Terreno.Descripcion"
                                                    Label=""
                                                    Variant="Variant.Outlined"
                                                    Required="true"
                                                    ReadOnly="@IsViewMode"
                                                    RequiredError="Este campo es requerido"
                                                    MaxLength="450"
                                                />

                                                <MudText Class="pb-1" HtmlTag="label" for="input_comentarios" Color="Color.Dark">Comentarios acerca del terreno</MudText>
                                                <MudTextField AutoGrow Lines="1" Margin="Margin.Dense" Class="flow-input" InputId="input_comentarios" @bind-Value="@Terreno.Comentario" Label="" Variant="Variant.Outlined"        
                                                              MaxLength="450"
                                                > </MudTextField>

                                            </MudItem>
                                        </MudGrid>
                                    </MudItem>
                                </MudGrid>
                            </MudContainer>
                        </MudStep>

                    </MudStepper>
                </MudForm>

                @*
        <MudForm @ref="_form" Disabled="@IsViewMode">
            <!--Descripción-->
            <MudText Class="pb-1" HtmlTag="label" for="input_prueba" Style="@($"color:{Colors.Shades.Black};")">Descripción</MudText>
            <MudTextField Margin="Margin.Dense"
                          Class="flow-input"
                          InputId="input_prueba"
                          Label=""
                          Variant="Variant.Outlined"
                          @bind-Value="TipoMedida.Descripcion"
                          Required="true"
                          ReadOnly="@IsViewMode"
                          RequiredError="La descripción es requerida"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))"/>

        </MudForm>
    *@

            </DialogContent>
            <DialogActions>
                <MudButton Variant="Variant.Text"
                           Color="Color.Secondary"
                           OnClick="Cancel">@(IsViewMode ? "Cerrar" : "Cancelar")</MudButton>
            </DialogActions>
        </MudDialog>

    </Authorized>

</AuthorizeView>

@code {
    private ClaimsPrincipal _usuario;


    [CascadingParameter] 
    IMudDialogInstance MudDialog { get; set; }
    [Parameter] 
    public string idItem { get; set; } = String.Empty;
    [Parameter] 
    public EventCallback OnSaved { get; set; }
    [Parameter]
    public bool IsViewMode { get; set; }
    private int _index;
    private MudSelect<string> _mudSelectTipoMedidaAreaRef;
    private TerrenoDTO Terreno { get; set; } = new TerrenoDTO();
    
    private MudForm _form;
    private string Title => IsViewMode ? "Ver terreno" : 
                        (String.IsNullOrEmpty(idItem) ? "Agregar terreno" : "Modificar terreno");
    

    //Listas de opciones

    private IEnumerable<TipoMedidaAreaDTO> _listaTiposMedidaArea = new List<TipoMedidaAreaDTO>();
    
    private IEnumerable<TipoSueloDTO> _listaTiposSuelo = new List<TipoSueloDTO>();
    private IEnumerable<ProvinciaDTO> _listaProvincias = new List<ProvinciaDTO>();

    private IEnumerable<MunicipioDTO> _listaMunicipios = new List<MunicipioDTO>();


    private IEnumerable<MunicipioDTO> _listaMunicipiosFiltrados = new List<MunicipioDTO>();
    
    private async Task OnPreviewInteraction(StepperInteractionEventArgs args)
    {
        // Por ejemplo, si se trata de completar el paso actual (avanzar o retroceder)
        if (args.Action == StepAction.Complete || args.Action == StepAction.Activate)
        {
            // Validar el formulario
            await _form.Validate();
            if (!_form.IsValid)
            {
                // Si la validación falla, cancelar la acción
                args.Cancel = true;
                // (Opcional) Mostrar un mensaje o realizar alguna acción adicional
            }
            else
            {
                if (_index == 3 && args.Action == StepAction.Complete)
                {
                    try
                    {
                        if (string.IsNullOrEmpty(Terreno.Id))
                        {
                            Terreno.Estado = (int)TerrenoEstado.Creado;
                            Terreno.PropietarioId = _usuario.Claims.First(x => x.Type == "sub").Value.ToString();
                                    
                            await TerrenoAgent.AddAsync(Terreno);
                        }
                        else
                        {
                            await TerrenoAgent.UpdateAsync(Terreno.Id, Terreno);
                        }
                        
                        Snackbar.Add("Operación realizada correctamente", Severity.Success);
                        await OnSaved.InvokeAsync();
                        MudDialog.Close();
                    }
                    catch (Exception ex)
                    {
                        Snackbar.Add($"Error: {ex.Message}", Severity.Error);
                    }

                }


            }
        }
    }

   
    // Validación personalizada
    private IEnumerable<string> ValidateDescription(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "La descripción es requerida";
        }
        else if (value.Length > 100)
        {
            yield return "Máximo 100 caracteres permitidos";
        }
    }

    #region Carga de datos

    protected async override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(idItem))
        {
            Terreno = await TerrenoAgent.GetByIdAsync(idItem, new[] { "Municipio", "Municipio.Provincia" }) ;
        }
        _listaTiposMedidaArea = await TipoMedidaAreaAgent.GetAllAsync();
        _listaTiposSuelo = await TipoSueloAgent.GetAllAsync();
        _listaProvincias = await ProvinciaAgent.GetAllAsync();
        _listaMunicipios = await MunicipioAgent.GetAllAsync();
        StateHasChanged();
        await _mudSelectTipoMedidaAreaRef.ForceUpdate();


    }
    

    #endregion


    private async Task Save()
    {
        if (IsViewMode) return;

        await _form.Validate();
        
        if (_form.IsValid)
        {
            try
            {
                if (string.IsNullOrEmpty(Terreno.Id))
                {
                    //await TipoMedidaAreaAgent.AddAsync(TipoMedida);
                }
                else
                {
                    //await TipoMedidaAreaAgent.UpdateAsync(TipoMedida.Id, TipoMedida);
                }
                
                Snackbar.Add("Operación realizada correctamente", Severity.Success);
                await OnSaved.InvokeAsync();
                MudDialog.Close();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    #region Manejo de provincias y municipios

    private async Task ObtenerMunicipiosDeProvincia(string provinciaId)
    {
        ProvinciaDTO _provinciaSeleccionada = _listaProvincias.Where(x => x.Id == provinciaId).ToList().FirstOrDefault();

        if (_provinciaSeleccionada is null)
        {
            return;
        }
        Terreno.ProvinciaId = provinciaId;
        Terreno.CoordenadaLatitud = _provinciaSeleccionada.Latitud ?? 0;
        Terreno.CoordenadaLongitud = _provinciaSeleccionada.Longitud ?? 0;

        _listaMunicipiosFiltrados = _listaMunicipios.Where(m => m.ProvinciaId == provinciaId).ToList();
        StateHasChanged();
        await JS.InvokeVoidAsync("GenerarMapa",
            Terreno.CoordenadaLatitud.ToString(CultureInfo.InvariantCulture), 
            Terreno.CoordenadaLongitud.ToString(CultureInfo.InvariantCulture),
            "8",
                _provinciaSeleccionada.Descripcion
            );

        
    }
    

    #endregion
    #region Manejo de imagenes

    private const string DefaultDragClass = "relative rounded-lg border-2 border-dashed pa-4 mt-4 mud-width-full mud-height-full";
    private string _dragClass = DefaultDragClass;
    private readonly List<string> _fileNames = new();
    private List<string> imagePreviews = new();
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? _fileUpload;

    private async Task ClearAsync()
    {
        await (_fileUpload?.ClearAsync() ?? Task.CompletedTask);
        _fileNames.Clear();
        imagePreviews.Clear();
        ClearDragClass();
    }

    private Task OpenFilePickerAsync()
        => _fileUpload?.OpenFilePickerAsync() ?? Task.CompletedTask;

    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        ClearDragClass();
        _fileNames.Clear();
        imagePreviews.Clear();
        var files = e.GetMultipleFiles();
        foreach (var file in files)
        {
            // Validar el ContentType para aceptar solo JPEG y PNG
            if (file.ContentType != "image/jpeg" && file.ContentType != "image/png")
            {
                Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
                Snackbar.Add($"El archivo {file.Name} no es válido. Solo se permiten JPG y PNG.", Severity.Error);
                continue;
            }

            _fileNames.Add(file.Name);
            await using var fs = new MemoryStream();
            await file.OpenReadStream(1048576).CopyToAsync(fs);
            var base64Data = Convert.ToBase64String(fs.ToArray());
            imagePreviews.Add($"data:{file.ContentType};base64,{base64Data}");
        }
    }

    private void Upload()
    {
        // Aquí puedes agregar la lógica para subir los archivos
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopCenter;
        Snackbar.Add("TODO: Upload your files!");
    }

    private void SetDragClass()
        => _dragClass = $"{DefaultDragClass} mud-border-primary";

    private void ClearDragClass()
        => _dragClass = DefaultDragClass;    

    #endregion


    #region Validaciones
    private int GetDecimalPlaces(double number)
    {
        string numberStr = number.ToString(System.Globalization.CultureInfo.InvariantCulture);
        int decimalIndex = numberStr.IndexOf(".");
        return decimalIndex == -1 ? 0 : numberStr.Length - decimalIndex - 1;
    }
    private IEnumerable<string> ValidateNumericFieldDouble(double? value)
    {
        if (!value.HasValue || value.Value <= 0)
            yield return "Este campo es requerido";
        
        if (GetDecimalPlaces(value.Value) > 4)
            yield return "Solo se permiten hasta 4 decimales";
    }
    private IEnumerable<string> ValidateNumericFieldDecimal(decimal? value)
    {
        if (!value.HasValue || value.Value <= 0)
            yield return "Este campo es requerido";

    }
    
    #endregion
}