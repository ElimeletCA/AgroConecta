@page "/sistema/seguridad/usuarios"
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.Seguridad
@using AgroConecta.Presentation.Client.Components.General.Alertas
@using AgroConecta.Shared.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar


@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUsuarioAgent UsuarioAgent


<AuthorizeView>
    <Authorized>
        @if (context.User.IsInRole(Shared.Constantes.Seguridad.Roles.Administrador.ToString()))
        {
<PageTitle>Lista de Usuarios</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Lista de Usuarios</MudText>

<MudDataGrid
    T="UsuarioDTO"
    QuickFilter="@_quickFilter"
    Items="@listaUsuarios"
    SortMode="SortMode.Multiple"
    Filterable="true"
    RowsPerPage="10"
    Hideable="true"
    FixedHeader="true"
    Height="calc(61vh - 10rem);"
    Loading="@_isLoadingData"
    LoadingProgressColor="Color.Primary"
>

    <ToolBarContent>
        <MudText Typo="Typo.h6">Usuarios</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Buscar..." Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="Usuario" CellClass=" ">
            <CellTemplate>
                <MudStack>
                    <MudText Typo="Typo.caption">@context.Item.UserName</MudText>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Correo electrónico" CellClass="" Sortable="false" Filterable="false">
            <CellTemplate>
                <MudStack>
                    <MudText Typo="Typo.caption">@context.Item.Email</MudText>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Acciones" CellClass="d-flex ">
            <CellTemplate>
                <MudStack Row>
                    <MudTooltip Text="Eliminar">
                        <MudIconButton
                            OnClick="@(() => EliminarUsuario(@context.Item.Id))"
                            Icon="@Icons.Material.Filled.Delete"
                            Color="Color.Error"/>
                    </MudTooltip>
                    <MudTooltip Text="Administrar roles">
                        <MudIconButton
                            OnClick="@(() => AdministrarRoles(@context.Item.Id))"
                            Icon="@Icons.Material.Filled.Build"
                            Color="Color.Tertiary"/>
                    </MudTooltip>   
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="UsuarioDTO" PageSizeOptions=@(new int[] {5, 10, 15})/>
    </PagerContent>
</MudDataGrid>

<MessageBox @ref="_messageBox" />
        }
    </Authorized>
</AuthorizeView>


@code {
    private ClaimsPrincipal _usuarioActual;
    private bool _isLoadingData;
    private string _searchString;

    private IEnumerable<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    private MessageBox _messageBox;

    protected override async Task OnInitializedAsync()
    {

        await GetAllUsers();
    }
    private async Task GetAllUsers()
    {
        _isLoadingData = true;
        var authestate =  await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _usuarioActual = authestate.User;
        var emailUsuario = _usuarioActual.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        if (!String.IsNullOrEmpty(emailUsuario))
        {
            listaUsuarios = await UsuarioAgent.GetAllExceptAsync(emailUsuario);
            _isLoadingData = false;
            StateHasChanged();
        }
    }
    

    private async Task EliminarUsuario(string userId)
    {
        if (await UsuarioAgent.DeleteAsync(userId))
        {
            Snackbar.Add("Usuario eliminado correctamente", Severity.Success);
            await GetAllUsers();

        }
    }

    private void AdministrarRoles(string userId)
    {
        // Redirigir a la página de administración de roles
        NavigationManager.NavigateTo($"/sistema/seguridad/rolesusuario/{userId}");
    }
    // quick filter - filter globally across multiple columns with the same input
    private Func<UsuarioDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Email.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
