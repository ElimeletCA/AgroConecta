@page "/sistema/seguridad/usuarios"
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.Seguridad
@using AgroConecta.Shared.Seguridad
@inject AuthenticationStateProvider AuthenticationStateProvider


@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUsuarioAgent UsuarioAgent
<PageTitle>Lista de Usuarios</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Lista de Usuarios</MudText>

<!-- Contenedor desplazable -->
<MudPaper Style="max-height:500px; overflow-y:auto;">
    <MudTable Items="listaUsuarios" Dense="true">
        <HeaderContent>
            <MudTh>Usuario</MudTh>
            <MudTh>Correo Electrónico</MudTh>
            <MudTh>Acciones</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudText>@context.UserName</MudText>
                <MudText Typo="Typo.caption">@context.Id</MudText>
            </MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>
                <!-- Menú de acciones -->
                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem OnClick="@(()=> EliminarUsuario(@context.Id))">
                        <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" /> Eliminar
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(()=> AdministrarRoles(@context.Id))">
                        <MudIcon Icon="@Icons.Material.Filled.Build" Class="mr-2" /> Administrar roles
                    </MudMenuItem>
                </MudMenu>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>
@code {
    private ClaimsPrincipal _usuarioActual;
    private IEnumerable<UsuarioDTO> listaUsuarios = new List<UsuarioDTO>();
    
    protected override async Task OnInitializedAsync()
    {
        var authestate =  await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _usuarioActual = authestate.User;
        await GetAllUsers();
    }
    private async Task GetAllUsers()
    {
        var emailUsuario = _usuarioActual.Claims.FirstOrDefault(c => c.Type == "email")?.Value;
        if (!String.IsNullOrEmpty(emailUsuario))
        {
            listaUsuarios = await UsuarioAgent.GetAllExcept(emailUsuario);
            StateHasChanged();
        }
    }
    

    private async Task EliminarUsuario(string userId)
    {
        // Lógica para eliminar usuario
        // Ejemplo: await Http.DeleteAsync($"api/usuarios/{userId}");
        // Luego refrescar la lista de usuarios
        await GetAllUsers();
    }

    private void AdministrarRoles(string userId)
    {
        // Redirigir a la página de administración de roles
        NavigationManager.NavigateTo($"/sistema/seguridad/rolesusuario/{userId}");
    }
}
