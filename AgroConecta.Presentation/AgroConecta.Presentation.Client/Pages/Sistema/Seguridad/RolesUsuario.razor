@page "/sistema/seguridad/rolesusuario/{UserId}"
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.Seguridad
@using AgroConecta.Presentation.Client.Components.General.Alertas
@using AgroConecta.Shared.DTO
@using AgroConecta.Shared.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IUsuarioAgent UsuarioAgent
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
<AuthorizeView Context="authContext">
    <Authorized >
        @if (authContext.User.IsInRole(Shared.Constantes.Seguridad.Roles.Administrador.ToString()))
        {
        <PageTitle>Administrar Roles</PageTitle>

        <MudText Typo="Typo.h5" Class="mb-4">
            <MudLink Href="/sistema/seguridad/usuarios/">
                <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Tertiary"/>
            </MudLink>
            Administrar roles para @_usuarioActual.Email
        </MudText>

        <MudDataGrid
            T="RolUsuarioDTO"
            QuickFilter="@_quickFilter"
            Items="@_rolesUsuario.RolesUsuario"
            SortMode="SortMode.Multiple"
            Filterable="true"
            RowsPerPage="5"
            Hideable="true"
            FixedHeader="true"
            Height="calc(59vh - 10rem);"
            Loading="@_isLoadingData"
            LoadingProgressColor="Color.Primary"
        >

            <ToolBarContent>
                <MudText Typo="Typo.h6">Roles</MudText>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchString" Placeholder="Buscar..." Adornment="Adornment.Start" Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.NombreRol" Title="Rol" Sortable="false" Filterable="false"/>
                <TemplateColumn Title="Estatus" CellClass="d-flex ">
                    <CellTemplate>
                        <MudStack Row>
                            <MudCheckBox @bind-Value="@context.Item.Asignado" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="RolUsuarioDTO" PageSizeOptions=@(new int[] {5, 10, 15})/>
            </PagerContent>
        </MudDataGrid>
        <br/>
        <MudPaper Class="mt-4 d-flex flex-row-reverse flex-grow-1 gap-4" Elevation="0">
            <MudButton OnClick="Guardar"
                       Class="flow-button"
                       Variant="Variant.Filled"
                       Color="Color.Primary">Guardar</MudButton>
        </MudPaper>

        <MessageBox @ref="_messageBox" />
        }
    </Authorized>
</AuthorizeView>


@code {
    [Parameter] 
    public string UserId { get; set; }
    
    private UsuarioDTO _usuarioActual = new();

    private AdministrarRolesUsuarioDTO _rolesUsuario = new AdministrarRolesUsuarioDTO();
    private MessageBox _messageBox;
    private bool _isLoadingData;
    private string _searchString;
    protected override async Task OnInitializedAsync()
    {
        _isLoadingData = true;
        _usuarioActual = await UsuarioAgent.GetByIdAsync(UserId);
        await GetAllRoles();
    }
    private async Task GetAllRoles()
    {
        _isLoadingData = true;
        _rolesUsuario = await UsuarioAgent.GetAllRolesByIdAsync(UserId);
        _isLoadingData = false;

        StateHasChanged();
    }

    private async Task Guardar()
    {
        var actualizacionCorrecta = await UsuarioAgent.UpdateRolesById(UserId, _rolesUsuario);
        if (actualizacionCorrecta)
        {
            Snackbar.Add("Roles modificados correctamente", Severity.Success);
            await GetAllRoles();
        }
    }
    // quick filter - filter globally across multiple columns with the same input
    private Func<RolUsuarioDTO, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.NombreRol.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };
}
