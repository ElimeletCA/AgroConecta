@page "/sistema/dashboard/propietario"
@using System.Net.Http.Headers
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Helpers.Seguridad
@using AgroConecta.Shared.Constantes.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid Spacing="3">
        
        <!-- Tarjetas de Resumen -->
        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Terrenos Publicados</MudText>
                <MudText Typo="Typo.h4" Color="Color.Primary">@TotalTerrenos</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Solicitudes Pendientes</MudText>
                <MudText Typo="Typo.h4" Color="Color.Secondary">@SolicitudesPendientes</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Terrenos Arrendados</MudText>
                <MudText Typo="Typo.h4" Color="Color.Tertiary">@TerrenosArrendados</MudText>
            </MudPaper>
        </MudItem>

        <MudItem xs="12" md="3">
            <MudPaper Elevation="4" Class="p-4 text-center">
                <MudText Typo="Typo.h6">Ingresos Estimados</MudText>
                <MudText Typo="Typo.h4" Color="Color.Success">@IngresosEstimados</MudText>
            </MudPaper>
        </MudItem>

        <!-- Tabla de Terrenos -->
        <MudItem xs="12">
            <MudTable Items="@Terrenos" Dense="true">
                <HeaderContent>
                    <MudTh>Nombre</MudTh>
                    <MudTh>Ubicaci�n</MudTh>
                    <MudTh>Tama�o</MudTh>
                    <MudTh>Estado</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>

                <RowTemplate Context="terreno">
                    <MudTd>@terreno.Nombre</MudTd>
                    <MudTd>@terreno.Ubicacion</MudTd>
                    <MudTd>@($"{terreno.Tamano} ha")</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@GetEstadoColor(terreno.Estado)">
                            @terreno.Estado
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="icons.mdi-eye" Color="Color.Primary" OnClick="@(() => VerDetallesTerreno(terreno.Id))" />
                        <MudIconButton Icon="icons.mdi-pencil" Color="Color.Secondary" OnClick="@(() => EditarTerreno(terreno.Id))" />
                        <MudIconButton Icon="icons.mdi-delete" Color="Color.Error" OnClick="@(() => EliminarTerreno(terreno.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>

        <!-- Tabla de Solicitudes de Arrendamiento -->
        <MudItem xs="12">
            <MudTable Items="@Solicitudes" Dense="true">
                <HeaderContent>
                    <MudTh>Solicitante</MudTh>
                    <MudTh>Terreno</MudTh>
                    <MudTh>Fecha</MudTh>
                    <MudTh>Propuesta</MudTh>
                    <MudTh>Estado</MudTh>
                    <MudTh>Acciones</MudTh>
                </HeaderContent>

                <RowTemplate Context="solicitud">
                    <MudTd>@solicitud.Solicitante</MudTd>
                    <MudTd>@solicitud.Terreno</MudTd>
                    <MudTd>@solicitud.Fecha.ToShortDateString()</MudTd>
                    <MudTd>@($"${solicitud.Monto}/mes - {solicitud.Duracion} meses")</MudTd>
                    <MudTd>
                        <MudChip T="string" Color="@GetEstadoColor(solicitud.Estado)">
                            @solicitud.Estado
                        </MudChip>
                    </MudTd>
                    <MudTd>
                        <MudIconButton Icon="icons.mdi-check" Color="Color.Success" OnClick="@(() => AceptarSolicitud(solicitud.Id))" />
                        <MudIconButton Icon="icons.mdi-close" Color="Color.Error" OnClick="@(() => RechazarSolicitud(solicitud.Id))" />
                        <MudIconButton Icon="icons.mdi-chat" Color="Color.Primary" OnClick="@(() => ChatearConSolicitante(solicitud.Id))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int TotalTerrenos = 5;
    private int SolicitudesPendientes = 2;
    private int TerrenosArrendados = 3;
    private decimal IngresosEstimados = 4500;

    private List<dynamic> Terrenos = new()
    {
        new { Id = 1, Nombre = "Finca La Esperanza", Ubicacion = "La Vega", Tamano = 10, Estado = "Disponible" },
        new { Id = 2, Nombre = "Terreno R�o Verde", Ubicacion = "Monte Plata", Tamano = 15, Estado = "En Negociaci�n" },
        new { Id = 3, Nombre = "Parcelas del Sur", Ubicacion = "San Crist�bal", Tamano = 5, Estado = "Arrendado" }
    };

    private List<dynamic> Solicitudes = new()
    {
        new { Id = 1, Solicitante = "Carlos Ram�rez", Terreno = "Finca La Esperanza", Fecha = DateTime.Now, Monto = 1500, Duracion = 12, Estado = "Pendiente" },
        new { Id = 2, Solicitante = "Mar�a L�pez", Terreno = "Terreno R�o Verde", Fecha = DateTime.Now.AddDays(-2), Monto = 2000, Duracion = 24, Estado = "En Revisi�n" }
    };

    private void VerDetallesTerreno(int id) => Nav.NavigateTo($"/terreno/{id}");
    private void EditarTerreno(int id) => Nav.NavigateTo($"/terreno/editar/{id}");
    private void EliminarTerreno(int id) => Console.WriteLine($"Eliminar terreno {id}");
    private void AceptarSolicitud(int id) => Console.WriteLine($"Aceptar solicitud {id}");
    private void RechazarSolicitud(int id) => Console.WriteLine($"Rechazar solicitud {id}");
    private void ChatearConSolicitante(int id) => Nav.NavigateTo($"/chat/{id}");

    private Color GetEstadoColor(string estado) => estado switch
    {
        "Disponible" => Color.Success,
        "En Negociacion" => Color.Warning,
        "Arrendado" => Color.Error,
        _ => Color.Default
    };
    private string Prueba;
    string _value;
    private TokenManager _tokenManager;
    private ClaimsPrincipal _usuario;
    protected override Task OnInitializedAsync()
    {
        _tokenManager = new TokenManager(JS);
        return base.OnInitializedAsync();
    }
    public async Task  PruebaT(){
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",  await _tokenManager.GetTokenAsync());
        //var response2FA = (await Http.GetAsync("api/Auth/GetTerrenos")).Content.ReadFromJsonAsync<ApiResponse>().Result;
        var response2FA = (await Http.GetStringAsync("api/Auth/GetTerrenos"));

        //var response2F = (await Http.GetAsync("api/Auth/GetTerrenos")).Content

        Console.WriteLine(response2FA);
    }
}