@page "/sistema/dashboard/propietario"
@using System.Net.Http.Headers
@using System.Security.Claims
@using AgroConecta.Presentation.Client.Helpers.Seguridad
@using AgroConecta.Shared.Constantes.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager Nav
<PageTitle>Dashboard Propietario - AgroConecta</PageTitle>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">
<style>
    .montserrat-900 {
        font-family: "Montserrat", sans-serif;
        font-optical-sizing: auto;
        font-weight: 900;
        font-style: normal;
    }
</style>
<MudContainer MaxWidth="MaxWidth.False">
    <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4 montserrat-900">Dashboard</MudText>
    <MudGrid>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <img style="height:40px; width: 40px;" class="mx-4" src="/icons/svgs/duotone/layer-plus.svg" />
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Terrenos Publicados</MudText>
                    <MudText Typo="Typo.h6">@TotalTerrenos</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <img style="height:40px; width: 40px;" class="mx-4" src="/icons/svgs/duotone/bell.svg" />
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Solicitudes Pend.</MudText>
                    <MudText Typo="Typo.h6">@SolicitudesPendientes</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <img style="height:40px; width: 40px;" class="mx-4" src="/icons/svgs/duotone/layer-minus.svg" />
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Terrenos Arrendados</MudText>
                    <MudText Typo="Typo.h6">@TerrenosArrendados</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudPaper Class="d-flex flex-row pt-6 pb-4" Style="height:100px;">
                <img style="height:40px; width: 40px;" class="mx-4" src="/icons/svgs/duotone/chart-line.svg" />
                <div>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary mb-n1">Ingresos Estimados</MudText>
                    <MudText Typo="Typo.h6">@IngresosEstimados</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudCard Class="card-tables" Style="height:100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudChip T="string" Color="Color.Default">Terrenos</MudChip>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-0">
                    <MudTable Items="@Terrenos" Dense="true">
                        <HeaderContent>
                            <MudTh>Nombre</MudTh>
                            <MudTh>Ubicación</MudTh>
                            <MudTh>Tamaño</MudTh>
                            <MudTh>Estado</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="terreno">
                            <MudTd>@terreno.Nombre</MudTd>
                            <MudTd>@terreno.Ubicacion</MudTd>
                            <MudTd>@($"{terreno.Tamano} ha")</MudTd>
                            <MudTd>
                                <MudChip T="string" Color="@GetEstadoColor(terreno.Estado)">
                                    @terreno.Estado
                                </MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="12" md="12">
            <MudCard Class="card-tables" Style="height:100%;">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudChip T="string" Color="Color.Default">Solicitudes</MudChip>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent Class="px-0">
                    <MudTable Items="@Solicitudes" Dense="true">
                        <HeaderContent>
                            <MudTh>Solicitante</MudTh>
                            <MudTh>Terreno</MudTh>
                            <MudTh>Fecha</MudTh>
                            <MudTh>Propuesta</MudTh>
                            <MudTh>Estado</MudTh>
                        </HeaderContent>

                        <RowTemplate Context="solicitud">
                            <MudTd>@solicitud.Solicitante</MudTd>
                            <MudTd>@solicitud.Terreno</MudTd>
                            <MudTd>@solicitud.Fecha.ToShortDateString()</MudTd>
                            <MudTd>@($"${solicitud.Monto}/mes - {solicitud.Duracion} meses")</MudTd>
                            <MudTd>
                                <MudChip T="string" Color="@GetEstadoColor(solicitud.Estado)">
                                    @solicitud.Estado
                                </MudChip>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {
    private int TotalTerrenos = 5;
    private int SolicitudesPendientes = 2;
    private int TerrenosArrendados = 3;
    private decimal IngresosEstimados = 4500;

    private List<dynamic> Terrenos = new()
    {
        new { Id = 1, Nombre = "Finca La Esperanza", Ubicacion = "La Vega", Tamano = 10, Estado = "Disponible" },
        new { Id = 2, Nombre = "Terreno Río Verde", Ubicacion = "Monte Plata", Tamano = 15, Estado = "En Negociación" },
        new { Id = 3, Nombre = "Parcelas del Sur", Ubicacion = "San Cristóbal", Tamano = 5, Estado = "Arrendado" }
    };

    private List<dynamic> Solicitudes = new()
    {
        new { Id = 1, Solicitante = "Carlos Ramírez", Terreno = "Finca La Esperanza", Fecha = DateTime.Now, Monto = 1500, Duracion = 12, Estado = "Pendiente" },
        new { Id = 2, Solicitante = "María López", Terreno = "Terreno Río Verde", Fecha = DateTime.Now.AddDays(-2), Monto = 2000, Duracion = 24, Estado = "En Revisión" }
    };

    private void VerDetallesTerreno(int id) => Nav.NavigateTo($"/terreno/{id}");
    private void EditarTerreno(int id) => Nav.NavigateTo($"/terreno/editar/{id}");
    private void EliminarTerreno(int id) => Console.WriteLine($"Eliminar terreno {id}");
    private void AceptarSolicitud(int id) => Console.WriteLine($"Aceptar solicitud {id}");
    private void RechazarSolicitud(int id) => Console.WriteLine($"Rechazar solicitud {id}");
    private void ChatearConSolicitante(int id) => Nav.NavigateTo($"/chat/{id}");

    private Color GetEstadoColor(string estado) => estado switch
    {
        "Disponible" => Color.Success,
        "En Negociacion" => Color.Warning,
        "Arrendado" => Color.Error,
        _ => Color.Default
    };
    private string Prueba;
    string _value;
    private TokenManager _tokenManager;
    private ClaimsPrincipal _usuario;
    protected override Task OnInitializedAsync()
    {
        _tokenManager = new TokenManager(JS);
        return base.OnInitializedAsync();
    }
    public async Task  PruebaT(){
        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",  await _tokenManager.GetTokenAsync());
        //var response2FA = (await Http.GetAsync("api/Auth/GetTerrenos")).Content.ReadFromJsonAsync<ApiResponse>().Result;
        var response2FA = (await Http.GetStringAsync("api/Auth/GetTerrenos"));

        //var response2F = (await Http.GetAsync("api/Auth/GetTerrenos")).Content

        Console.WriteLine(response2FA);
    }
}