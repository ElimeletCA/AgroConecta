@using AgroConecta.Presentation.Client.Constantes
@using AgroConecta.Presentation.Client.Layout
@using AgroConecta.Shared.Seguridad
@using AgroConecta.Shared.Seguridad.Mensajes
@using Microsoft.AspNetCore.Components.Authorization
@using AgroConecta.Presentation.Client.Components.General
@using AgroConecta.Presentation.Client.Components.General.Alertas
@using AgroConecta.Presentation.Client.Helpers.Seguridad
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject HttpClient Http
@inject IDialogService DialogS
@inject NavigationManager NavigationManager

@page "/Seguridad/Login"
@layout EmptyLayout



<PageTitle>Iniciar sesión - AgroConecta</PageTitle>


<br />
<MudText Class="pb-1" HtmlTag="label" for="txtEmail"  Color="Color.Dark" >Correo electrónico</MudText>
<MudTextField Margin="Margin.Dense" Class="flow-input" InputId="txtEmail" @bind-Value="usuario.Email" Label="" Variant="Variant.Outlined">  </MudTextField>


<MudText Class="pb-1" HtmlTag="label" for="txtPassword"  Color="Color.Dark" >Contraseña</MudText>
<MudTextField Margin="Margin.Dense" Class="flow-input" InputId="txtPassword" @bind-Value="usuario.pasword_without_hash" Label="" Variant="Variant.Outlined">  </MudTextField>

<br />
<MudButton Variant="Variant.Filled" @onclick=IniciarSesion Color="Color.Primary">Ingresar</MudButton>
No esta registrado?<MudLink Href="/Seguridad/Registro">Crear una cuenta</MudLink>

<MessageBox @ref="_messageBox"/>
<MessageBox2FA @ref="_messageBox2Fa"/>

@*
<MudButton OnClick="@(() => OpenDialogAsync(_backdropClick))" Color="Color.Tertiary">Disable backdrop dialog</MudButton>
*@


@code {
    private TokenManager _tokenManager;    
    UsuarioDTO usuario = new UsuarioDTO()
    {
        
    };
    
    private MessageBox _messageBox;
    
    private MessageBox2FA _messageBox2Fa;
    private readonly DialogOptions _backdropClick = new() { BackdropClick = false };
    

    protected override Task OnInitializedAsync()
    {
        usuario.Email = "elimelet.dev@gmail.com";
        usuario.pasword_without_hash = "@Elimelet123";
        _tokenManager = new TokenManager(JS);
        return base.OnInitializedAsync();
    }


    private async Task IniciarSesion()
    {
        var response = (await Http.PostAsJsonAsync("api/Auth/Login", usuario)).Content.ReadFromJsonAsync<ApiResponse<BackendMessage>>().Result;
        if (response.success)
        {
            var dialog = await DialogS.ShowAsync<MessageBox2FA>("Verificación 2FA", _backdropClick);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                
                usuario.two_factor_code = (string)result.Data!;
                var response2FA = (await Http.PostAsJsonAsync("api/Auth/Verificar2FA", usuario)).Content.ReadFromJsonAsync<ApiResponse<BackendMessage>>().Result;
                if (response2FA.success)
                {
                    DialogS.Close(dialog);
                    _tokenManager.SetTokenAsync(response2FA.message.Descripcion);
                    await AuthenticationStateProvider.GetAuthenticationStateAsync();
                    await _messageBox.OpenDialogAsync("Ha iniciado sesión con éxito","Será redirigido al sistema...", (int)TipoMensaje.Exito );
                    NavigationManager.NavigateTo($"/Sistema/Dashboard", forceLoad:true);

                }
                else
                {
                    await _messageBox.OpenDialogAsync(response2FA.message.Codigo,response2FA.message.Descripcion, (int)TipoMensaje.Error );

                }
            }
            
        }
        else
        {
           await _messageBox.OpenDialogAsync(response.message.Codigo,response.message.Descripcion, (int)TipoMensaje.Error );
        }
    }
}