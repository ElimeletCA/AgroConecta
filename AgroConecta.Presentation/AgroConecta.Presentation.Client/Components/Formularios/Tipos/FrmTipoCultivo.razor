@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema
@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema.Tipos
@using AgroConecta.Shared.DTO
@using AgroConecta.Shared.DTO.Tipos
@using MudBlazor.Utilities
@inject ITipoCultivoAgent TipoCultivoAgent
@inject ISnackbar Snackbar

<MudDialog >
    <TitleContent>
        <MudText Typo="Typo.h6">@Title</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" Disabled="@IsViewMode">
            <!--Descripción-->
            <MudText Class="pb-1" HtmlTag="label" for="input_prueba" Style="@($"color:{Colors.Shades.Black};")">Descripción</MudText>
            <MudTextField Margin="Margin.Dense"
                          Class="flow-input"
                          InputId="input_prueba"
                          Label=""
                          Variant="Variant.Outlined"
                          @bind-Value="TipoCultivo.Descripcion"
                          Required="true"
                          ReadOnly="@IsViewMode"
                          RequiredError="La descripción es requerida"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))"/>

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text"
                   Color="Color.Secondary"
                   OnClick="Cancel">@(IsViewMode ? "Cerrar" : "Cancelar")</MudButton>
        @if (!IsViewMode)
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="Save">Guardar</MudButton>
        }

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public TipoCultivoDTO TipoCultivo { get; set; } = new();
    [Parameter] public EventCallback OnSaved { get; set; }
    [Parameter] public bool IsViewMode { get; set; }

    private MudForm _form;
    private string Title => IsViewMode ? "Ver Tipo de Cultivo" : 
                        (TipoCultivo.Id == null ? "Nuevo Tipo de Cultivo" : "Editar Tipo de Cultivo");

    // Validación personalizada
    private IEnumerable<string> ValidateDescription(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "La descripción es requerida";
        }
        else if (value.Length > 100)
        {
            yield return "Máximo 100 caracteres permitidos";
        }
    }

    protected override void OnInitialized()
    {
        if (!IsViewMode && !string.IsNullOrEmpty(TipoCultivo.Id))
        {
            // Clonar el objeto para edición
            TipoCultivo = new TipoCultivoDTO
            {
                Id = TipoCultivo.Id,
                Descripcion = TipoCultivo.Descripcion
            };
        }
    }

    private async Task Save()
    {
        if (IsViewMode) return;

        await _form.Validate();
        
        if (_form.IsValid)
        {
            try
            {
                if (string.IsNullOrEmpty(TipoCultivo.Id))
                {
                    await TipoCultivoAgent.AddAsync(TipoCultivo);
                }
                else
                {
                    await TipoCultivoAgent.UpdateAsync(TipoCultivo.Id, TipoCultivo);
                }
                
                Snackbar.Add("Operación realizada correctamente", Severity.Success);
                await OnSaved.InvokeAsync();
                MudDialog.Close();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}