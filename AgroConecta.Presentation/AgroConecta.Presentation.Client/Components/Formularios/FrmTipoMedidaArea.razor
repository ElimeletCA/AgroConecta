@using AgroConecta.Presentation.Client.Agents.Interfaces.Sistema
@using AgroConecta.Shared.DTO
@inject ITipoMedidaAreaAgent TipoMedidaAreaAgent
@inject ISnackbar Snackbar

<MudDialog ContentStyle="width: 600px;height: 600px;">
    <TitleContent>
        <MudText Typo="Typo.h6">@(TipoMedida.Id == null ? "Nuevo Tipo" : "Editar Tipo")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @onsubmit="Save">
            <MudTextField @bind-Value="TipoMedida.Descripcion"
                          Label="Descripción"
                          Required="true"
                          RequiredError="La descripción es requerida"
                          Validation="@(new Func<string, IEnumerable<string>>(ValidateDescription))"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Text"
                   Color="Color.Tertiary"
                   OnClick="Cancel">Cancelar</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   OnClick="Save">Guardar</MudButton>

    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; }
    [Parameter] public TipoMedidaAreaDTO TipoMedida { get; set; } = new();
    [Parameter] public EventCallback OnSaved { get; set; }

    private MudForm _form;
    private bool _isEdit => TipoMedida?.Id != null;

    // Validación personalizada
    private IEnumerable<string> ValidateDescription(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            yield return "La descripción es requerida";
        }
        else if (value.Length > 100)
        {
            yield return "Máximo 100 caracteres permitidos";
        }
    }

    protected override void OnInitialized()
    {
        if (_isEdit)
        {
            TipoMedida = new TipoMedidaAreaDTO
            {
                Id = TipoMedida.Id,
                Descripcion = TipoMedida.Descripcion
            };
        }
    }

    private async Task Save()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                if (_isEdit)
                {
                    await TipoMedidaAreaAgent.UpdateAsync(TipoMedida.Id, TipoMedida);
                }
                else
                {
                    await TipoMedidaAreaAgent.AddAsync(TipoMedida);
                }

                Snackbar.Add(_isEdit ? "Registro actualizado correctamente" : "Registro creado correctamente", Severity.Success);
                await OnSaved.InvokeAsync();
                MudDialog.Close();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}