// <auto-generated />
using System;
using AgroConecta.Infrastructure.Repositorios.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AgroConecta.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Arrendamiento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AgricultorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("CantidadAreaSueloArrendada")
                        .HasColumnType("double precision");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Condiciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FrecuenciaPago")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoPago")
                        .HasColumnType("numeric");

                    b.Property<string>("TerrenoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoArrendamientoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AgricultorId");

                    b.HasIndex("TerrenoId");

                    b.HasIndex("TipoArrendamientoId");

                    b.ToTable("Arrendamiento", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Extras.Archivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Formato")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombreArchivo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("ReferenciaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoArchivoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlArchivo")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.HasKey("Id");

                    b.HasIndex("TipoArchivoId");

                    b.ToTable("Archivo", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Proyecto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ArrendamientoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InversionistaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("MontoTotalPresupuesto")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MontoTotalRetornoEstimado")
                        .HasColumnType("numeric");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Objetivos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RegistroActivo")
                        .HasColumnType("boolean");

                    b.Property<string>("ResultadosEsperados")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoCultivoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArrendamientoId");

                    b.HasIndex("InversionistaId");

                    b.HasIndex("TipoCultivoId");

                    b.ToTable("Proyecto", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Seguridad.Perfil", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DescripcionPerfil")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NombrePerfil")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Perfil", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "118cf490-f506-43c8-a43b-41143886ea8f",
                            DescripcionPerfil = "Propietario",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombrePerfil = "Propietario"
                        },
                        new
                        {
                            Id = "5d243871-1b82-4afc-8bed-3657729e615a",
                            DescripcionPerfil = "Agricultor",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombrePerfil = "Agricultor"
                        },
                        new
                        {
                            Id = "28b241ba-5797-4e1f-9ab4-456d18181ec9",
                            DescripcionPerfil = "Inversionista",
                            IsDeleted = false,
                            LastUpdateUtc = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            NombrePerfil = "Inversionista"
                        });
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Seguridad.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("fecha_nacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("nombre_completo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Terreno", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<double>("CantidadAreaSueloDisponible")
                        .HasColumnType("double precision");

                    b.Property<double>("CantidadAreaSueloTotal")
                        .HasColumnType("double precision");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double>("CoordenadaLatitud")
                        .HasColumnType("double precision");

                    b.Property<double>("CoordenadaLongitud")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PropietarioId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoMedidaAreaId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoSueloId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.HasIndex("TipoMedidaAreaId");

                    b.HasIndex("TipoSueloId");

                    b.ToTable("Terreno", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoArchivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TipoArchivo", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoArrendamiento", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RegistroActivo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TipoArrendamiento", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoCultivo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("TipoCultivo", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoMedidaArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RegistroActivo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TipoMedidaArea", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoSuelo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DeletedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdateUtc")
                        .IsConcurrencyToken()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("RegistroActivo")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("TipoSuelo", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PerfilUsuario", b =>
                {
                    b.Property<string>("perfilesId")
                        .HasColumnType("text");

                    b.Property<string>("usuariosId")
                        .HasColumnType("text");

                    b.HasKey("perfilesId", "usuariosId");

                    b.HasIndex("usuariosId");

                    b.ToTable("UsuarioPerfil", (string)null);
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Arrendamiento", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", "Agricultor")
                        .WithMany("arrendamientos")
                        .HasForeignKey("AgricultorId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Terreno", "Terreno")
                        .WithMany("Arrendamientos")
                        .HasForeignKey("TerrenoId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Tipos.TipoArrendamiento", "TipoArrendamiento")
                        .WithMany("Arrendamientos")
                        .HasForeignKey("TipoArrendamientoId")
                        .IsRequired();

                    b.Navigation("Agricultor");

                    b.Navigation("Terreno");

                    b.Navigation("TipoArrendamiento");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Extras.Archivo", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Tipos.TipoArchivo", "TipoArchivo")
                        .WithMany("Archivos")
                        .HasForeignKey("TipoArchivoId")
                        .IsRequired();

                    b.Navigation("TipoArchivo");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Proyecto", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Arrendamiento", "Arrendamiento")
                        .WithMany("Proyectos")
                        .HasForeignKey("ArrendamientoId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", "Inversionista")
                        .WithMany("proyectos")
                        .HasForeignKey("InversionistaId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Tipos.TipoCultivo", "TipoCultivo")
                        .WithMany("Proyectos")
                        .HasForeignKey("TipoCultivoId")
                        .IsRequired();

                    b.Navigation("Arrendamiento");

                    b.Navigation("Inversionista");

                    b.Navigation("TipoCultivo");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Terreno", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", "Propietario")
                        .WithMany("terrenos")
                        .HasForeignKey("PropietarioId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Tipos.TipoMedidaArea", "TipoMedidaArea")
                        .WithMany("Terrenos")
                        .HasForeignKey("TipoMedidaAreaId")
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Tipos.TipoSuelo", "TipoSuelo")
                        .WithMany("Terrenos")
                        .HasForeignKey("TipoSueloId")
                        .IsRequired();

                    b.Navigation("Propietario");

                    b.Navigation("TipoMedidaArea");

                    b.Navigation("TipoSuelo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PerfilUsuario", b =>
                {
                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Perfil", null)
                        .WithMany()
                        .HasForeignKey("perfilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgroConecta.Domain.Sistema.Seguridad.Usuario", null)
                        .WithMany()
                        .HasForeignKey("usuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Arrendamiento", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Seguridad.Usuario", b =>
                {
                    b.Navigation("arrendamientos");

                    b.Navigation("proyectos");

                    b.Navigation("terrenos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Terreno", b =>
                {
                    b.Navigation("Arrendamientos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoArchivo", b =>
                {
                    b.Navigation("Archivos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoArrendamiento", b =>
                {
                    b.Navigation("Arrendamientos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoCultivo", b =>
                {
                    b.Navigation("Proyectos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoMedidaArea", b =>
                {
                    b.Navigation("Terrenos");
                });

            modelBuilder.Entity("AgroConecta.Domain.Sistema.Tipos.TipoSuelo", b =>
                {
                    b.Navigation("Terrenos");
                });
#pragma warning restore 612, 618
        }
    }
}
